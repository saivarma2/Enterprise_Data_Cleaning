{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai Varma\\\\Desktop\\\\Enterprise_Data_Cleaning\\\\frontend\\\\src\\\\components\\\\FileUpload.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/FileUpload.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUploadSuccess\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadMessage, setUploadMessage] = useState('');\n  const [filePath, setFilePath] = useState('');\n  const [cleanMessage, setCleanMessage] = useState('');\n  const onFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const onUpload = async () => {\n    if (!file) {\n      setUploadMessage(\"Please select a file before uploading.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      // Use the full backend URL if your frontend and backend run on different ports.\n      const res = await axios.post('http://localhost:5000/file/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setUploadMessage(res.data.message);\n      setFilePath(res.data.file_path);\n      onUploadSuccess(res.data.file_path);\n    } catch (err) {\n      var _err$response;\n      console.error(\"Upload error:\", err);\n      setUploadMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data.error) || 'Upload failed.');\n    }\n  };\n  const onClean = async () => {\n    if (!filePath) {\n      setCleanMessage(\"Please upload a file first.\");\n      return;\n    }\n    if (window.confirm(\"Do you want to start the cleaning process?\")) {\n      try {\n        const res = await axios.post('http://localhost:5000/file/clean', {\n          file_path: filePath,\n          confirm: true\n        });\n        setCleanMessage(res.data.message);\n        onUploadSuccess(filePath);\n      } catch (err) {\n        var _err$response2;\n        console.error(\"Clean error:\", err);\n        setCleanMessage(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data.error) || 'Cleaning failed.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Excel File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onFileChange,\n      accept: \".xlsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: uploadMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clean Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClean,\n      children: \"Clean\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: cleanMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"MKux0rdFuKEYBaUKJ67IUfOWxfs=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","FileUpload","onUploadSuccess","_s","file","setFile","uploadMessage","setUploadMessage","filePath","setFilePath","cleanMessage","setCleanMessage","onFileChange","e","target","files","onUpload","formData","FormData","append","res","post","headers","data","message","file_path","err","_err$response","console","error","response","onClean","window","confirm","_err$response2","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sai Varma/Desktop/Enterprise_Data_Cleaning/frontend/src/components/FileUpload.js"],"sourcesContent":["// frontend/src/components/FileUpload.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FileUpload = ({ onUploadSuccess }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [uploadMessage, setUploadMessage] = useState('');\r\n  const [filePath, setFilePath] = useState('');\r\n  const [cleanMessage, setCleanMessage] = useState('');\r\n\r\n  const onFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const onUpload = async () => {\r\n    if (!file) {\r\n      setUploadMessage(\"Please select a file before uploading.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    try {\r\n      // Use the full backend URL if your frontend and backend run on different ports.\r\n      const res = await axios.post('http://localhost:5000/file/upload', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      setUploadMessage(res.data.message);\r\n      setFilePath(res.data.file_path);\r\n      onUploadSuccess(res.data.file_path);\r\n    } catch (err) {\r\n      console.error(\"Upload error:\", err);\r\n      setUploadMessage(err.response?.data.error || 'Upload failed.');\r\n    }\r\n  };\r\n\r\n  const onClean = async () => {\r\n    if (!filePath) {\r\n      setCleanMessage(\"Please upload a file first.\");\r\n      return;\r\n    }\r\n    if (window.confirm(\"Do you want to start the cleaning process?\")) {\r\n      try {\r\n        const res = await axios.post('http://localhost:5000/file/clean', {\r\n          file_path: filePath,\r\n          confirm: true\r\n        });\r\n        setCleanMessage(res.data.message);\r\n        onUploadSuccess(filePath);\r\n      } catch (err) {\r\n        console.error(\"Clean error:\", err);\r\n        setCleanMessage(err.response?.data.error || 'Cleaning failed.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Excel File</h2>\r\n      <input type=\"file\" onChange={onFileChange} accept=\".xlsx\" />\r\n      <button onClick={onUpload}>Upload</button>\r\n      <p>{uploadMessage}</p>\r\n      \r\n      <h2>Clean Data</h2>\r\n      <button onClick={onClean}>Clean</button>\r\n      <p>{cleanMessage}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}